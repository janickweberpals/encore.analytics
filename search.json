[{"path":"https://janickweberpals.github.io/encore.analytics/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Janick Weberpals. Author, maintainer.","code":""},{"path":"https://janickweberpals.github.io/encore.analytics/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Weberpals J (2025). encore.analytics: Functions Wrappers Streamline Complex Analytic Workflows Real-World Data Studies Based ENCORE Trial Emulation Project. R package version 0.1.0, https://janickweberpals.github.io/encore.analytics/.","code":"@Manual{,   title = {encore.analytics: Functions and Wrappers To Streamline Complex Analytic Workflows in Real-World Data Studies Based On The ENCORE Trial Emulation Project},   author = {Janick Weberpals},   year = {2025},   note = {R package version 0.1.0},   url = {https://janickweberpals.github.io/encore.analytics/}, }"},{"path":"https://janickweberpals.github.io/encore.analytics/index.html","id":"encoreanalytics-","dir":"","previous_headings":"","what":"Functions and Wrappers To Streamline Complex Analytic Workflows in Real-World Data Studies Based On The ENCORE Trial Emulation Project","title":"Functions and Wrappers To Streamline Complex Analytic Workflows in Real-World Data Studies Based On The ENCORE Trial Emulation Project","text":"goal encore.analytics …","code":""},{"path":"https://janickweberpals.github.io/encore.analytics/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Functions and Wrappers To Streamline Complex Analytic Workflows in Real-World Data Studies Based On The ENCORE Trial Emulation Project","text":"can install development version encore.analytics GitHub :","code":"# install.packages(\"pak\") pak::pak(\"janickweberpals/encore.analytics\")"},{"path":"https://janickweberpals.github.io/encore.analytics/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Functions and Wrappers To Streamline Complex Analytic Workflows in Real-World Data Studies Based On The ENCORE Trial Emulation Project","text":"comprehensive walkthrough examples, please refer vignette : https://janickweberpals.github.io/imputation-ps-workflows/","code":""},{"path":"https://janickweberpals.github.io/encore.analytics/reference/create_table1.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper around gtsummary::tbl_summary() to create a beautiful Table 1 quickly — create_table1","title":"Wrapper around gtsummary::tbl_summary() to create a beautiful Table 1 quickly — create_table1","text":"Builds table 1 using gtsummary package. function takes one-row-per-patient dataframe creates summary table covariates stratified treatment group.","code":""},{"path":"https://janickweberpals.github.io/encore.analytics/reference/create_table1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper around gtsummary::tbl_summary() to create a beautiful Table 1 quickly — create_table1","text":"","code":"create_table1(   x = NULL,   covariates = NULL,   covariates_labels = NULL,   treat = \"treat\",   explicit_na_categorical = TRUE )"},{"path":"https://janickweberpals.github.io/encore.analytics/reference/create_table1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper around gtsummary::tbl_summary() to create a beautiful Table 1 quickly — create_table1","text":"x dataframe individual-level patient data one-row-per-patient format treatment stratification variable covariates displayed Table 1 covariates character vector columns/covariate names displayed Table 1 covariates_labels named character vector list formulas specifying variables labels covariate-label pairs display table treat character specifying column name treatment variable explicit_na_categorical logical, missings categorical variables explicitly included separate category (default TRUE)","code":""},{"path":"https://janickweberpals.github.io/encore.analytics/reference/create_table1.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapper around gtsummary::tbl_summary() to create a beautiful Table 1 quickly — create_table1","text":"object class \"tbl_summary\" \"gtsummary\"","code":""},{"path":"https://janickweberpals.github.io/encore.analytics/reference/create_table1.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Wrapper around gtsummary::tbl_summary() to create a beautiful Table 1 quickly — create_table1","text":"Wrapper tbl_summary. function create_table1 wrapper around gtsummary::tbl_summary() function. designed create summary table covariates stratified treatment group. function requires one-row-per-patient dataframe creates summary table covariates stratified treatment group.","code":""},{"path":"https://janickweberpals.github.io/encore.analytics/reference/create_table1.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wrapper around gtsummary::tbl_summary() to create a beautiful Table 1 quickly — create_table1","text":"","code":"if (FALSE) { # \\dontrun{ library(encore.analytics)  # simulate a cohort with 1,000 patients with 20% missing data data <- simulate_data(   n = 1000,   imposeNA = TRUE,   propNA = 0.2   )  # create a Table 1 create_table1(   x = data,   covariates = c(\"dem_age_index_cont\", \"dem_sex_cont\", \"c_smoking_history\"),   covariates_labels = list(     \"dem_age_index_cont\" = \"Age\",     \"dem_sex_cont\" = \"Sex\",     \"c_smoking_history\" = \"Smoking history\"     ),   treat = \"treat\"   ) } # }"},{"path":"https://janickweberpals.github.io/encore.analytics/reference/install_on_demand.html","id":null,"dir":"Reference","previous_headings":"","what":"Install package on demand — install_on_demand","title":"Install package on demand — install_on_demand","text":"function checks package installed. , asks user want install . user agrees, installs package CRAN.","code":""},{"path":"https://janickweberpals.github.io/encore.analytics/reference/install_on_demand.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Install package on demand — install_on_demand","text":"","code":"install_on_demand(pkg, quiet = FALSE, ...)"},{"path":"https://janickweberpals.github.io/encore.analytics/reference/install_on_demand.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Install package on demand — install_on_demand","text":"pkg character string name package quiet logical. TRUE, suppresses messages ... additional arguments passed install.packages","code":""},{"path":"https://janickweberpals.github.io/encore.analytics/reference/km_pooling.html","id":null,"dir":"Reference","previous_headings":"","what":"Pooled Kaplan-Meier estimate and survival curve — km_pooling","title":"Pooled Kaplan-Meier estimate and survival curve — km_pooling","text":"Computes pooled median survival Kaplan-Meier estimates using Rubin's rule outputs corresponding Kaplan-Meier curve across imputed matched/weighted datasets","code":""},{"path":"https://janickweberpals.github.io/encore.analytics/reference/km_pooling.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pooled Kaplan-Meier estimate and survival curve — km_pooling","text":"","code":"km_pooling(   object = NULL,   surv_formula = stats::as.formula(survival::Surv(fu_itt_months, death_itt) ~ treat) )"},{"path":"https://janickweberpals.github.io/encore.analytics/reference/km_pooling.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pooled Kaplan-Meier estimate and survival curve — km_pooling","text":"object imputed matched (mimids) weighted (wimids) object surv_formula specification survival model formula fitted","code":""},{"path":"https://janickweberpals.github.io/encore.analytics/reference/km_pooling.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pooled Kaplan-Meier estimate and survival curve — km_pooling","text":"list pooled median survival estimate pooled Kaplan-Meier curve km_median_survival: strata = stratum t_median = median survival time t_lower = lower 95% CI median survival time t_upper = upper 95% CI median survival time km_survival_table: strata = stratum time = observed time point m = number imputed datasets qbar = pooled univariate estimate complementary log-log transformed survival probabilities, see formula (3.1.2) Rubin (1987) t = total variance pooled univariate estimate complementary log-log transformed survival probabilities, formula (3.1.5) Rubin (1987) se = total standard error pooled estimate (derived sqrt(t)) surv = back-transformed pooled survival probability lower = Wald-type lower 95% confidence interval back-transformed pooled survival probability upper = Wald-type upper 95% confidence interval back-transformed pooled survival probability km_plot: ggplot2 object Kaplan-Meier curve","code":""},{"path":"https://janickweberpals.github.io/encore.analytics/reference/km_pooling.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Pooled Kaplan-Meier estimate and survival curve — km_pooling","text":"function requires object class mimids wimids, output workflow requires imputing multiple (m) datasets using mice amelia matching weighting imputed dataset via MatchThem package (see examples). function fits pre-specified survfit model (surv_formula, survfit package) compute survival probabilities individual time point according Kaplan-Meier method. matched weighted datasets, weights, cluster membership (matching ) robust variance estimates considered survfit call default. Since survival probabilities typically follow normal distributions, need transformed approximate normality first pooling across imputed datasets time points. end, survival probabilities first transformed using complementary log-log transformation (log(-log(1-pr(surv)))) recommended multiple sources (Marshall, Billingham, Bryan (2009)). pool transformed estimates across imputed datasets time points, pool.scalar function used apply Rubin's rule combine pooled estimates (qbar) according formula (3.1.2) Rubin (1987) compute corresponding total variance (t) pooled estimate according formula (3.1.5) Rubin (1987). pooled survival probabilities back-transformed via 1-exp(-exp(qbar)) pooled survival probability estimates 1-exp(-exp(qbar +/- 1.96*sqrt(t))) lower upper 95% confidence intervals. formula indicates, pooled standard error computed square root total variance. vertically stacked table transformed backtransformed estimates returned km_survival_table table. Finally, median survival time extracted km_survival_table table determining time survival probability drops .5 first time. sub-function Terry M. Therneau's print.survfit function used. Therneau also considers edge cases/nuisances (x = time, y = surv): Nuisance 1: one y's exactly .5, want mean corresponding x first x y<.5. need use equivalent .equal check .5 however: survfit(Surv(1:100)~1) gives value .5 + 1.1e-16 due roundoff error. Nuisance 2: may NA y's Nuisance 3: y's <=.5, return NA Nuisance 4: obs (many) .5 may censored, giving stretch values = .5 +- epsilon function follows following logic: Fit Kaplan-Meier survival function imputed matched/weighted dataset Transform survival probabilities using complementary log-log transformation Pool transformed survival probabilities compute total variance using Rubin's rule Back-transform pooled survival probabilities compute 95% confidence intervals Extract median survival time corresponding 95% confidence intervals Plot Kaplan-Meier curve pooled survival probabilities confidence intervals references: https://stefvanbuuren.name/fimd/sec-pooling.html https://link.springer.com/article/10.1007/s10198-008-0129-y https://bmcmedresmethodol.biomedcentral.com/articles/10.1186/s12874-015-0048-4","code":""},{"path":[]},{"path":"https://janickweberpals.github.io/encore.analytics/reference/km_pooling.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pooled Kaplan-Meier estimate and survival curve — km_pooling","text":"","code":"if(require(\"MatchThem\")){    library(encore.analytics)   library(mice)   library(MatchThem)    # simulate a cohort with 1,000 patients with 20% missing data   data <- simulate_data(     n = 1000,     imposeNA = TRUE,     propNA = 0.2     )    # impute the data   set.seed(42)   mids <- mice(data, m = 5, print = FALSE)    # fit a propensity score model   fit <- as.formula(treat ~ dem_age_index_cont + dem_sex_cont + c_smoking_history)    # weight (or alternatively match) patients within each imputed dataset   wimids <- weightthem(     formula = fit,     datasets = mids,     approach = \"within\",     method = \"glm\",     estimand = \"ATO\"     )    # fit a survival model   km_fit <- as.formula(survival::Surv(fu_itt_months, death_itt) ~ treat)    # estimate and pool median survival times and Kaplan-Meier curve   km_out <- km_pooling(     object = wimids,     surv_formula = km_fit     )    # median survival time   km_out$km_median_survival    # KM curve   km_out$km_plot  } #> Loading required package: MatchThem #>  #> Attaching package: ‘MatchThem’ #> The following object is masked from ‘package:base’: #>  #>     cbind #>  #> Attaching package: ‘mice’ #> The following objects are masked from ‘package:MatchThem’: #>  #>     cbind, pool #> The following object is masked from ‘package:stats’: #>  #>     filter #> The following objects are masked from ‘package:base’: #>  #>     cbind, rbind #> Warning: Number of logged events: 801 #> Estimating weights     | dataset: #1 #>  #2 #>  #3 #>  #4 #>  #5 #>"},{"path":"https://janickweberpals.github.io/encore.analytics/reference/simulate_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulates an artifical EHR-derived analysis-ready oncology dataset — simulate_data","title":"Simulates an artifical EHR-derived analysis-ready oncology dataset — simulate_data","text":"Parameterized function quickly create EHR-derived analytic cohort analytic code development.","code":""},{"path":"https://janickweberpals.github.io/encore.analytics/reference/simulate_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulates an artifical EHR-derived analysis-ready oncology dataset — simulate_data","text":"","code":"simulate_data(   n_total = 3500,   seed = 42,   include_id = TRUE,   imposeNA = TRUE,   propNA = NULL )"},{"path":"https://janickweberpals.github.io/encore.analytics/reference/simulate_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulates an artifical EHR-derived analysis-ready oncology dataset — simulate_data","text":"n_total integer, number total patients seed integer, seed reproducibility include_id logical, include generated patientid variable imposeNA logical, set covariates missing propNA numeric, proportion missingness, needs 0 1","code":""},{"path":"https://janickweberpals.github.io/encore.analytics/reference/simulate_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulates an artifical EHR-derived analysis-ready oncology dataset — simulate_data","text":"data frame simulated analytic cohort","code":""},{"path":"https://janickweberpals.github.io/encore.analytics/reference/simulate_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulates an artifical EHR-derived analysis-ready oncology dataset — simulate_data","text":"function simulates cohort patients oncology data. cohort simulated using Weibull distribution time event logistic distribution treatment assignment. function also allows missingness imposed data. function parameterized allow number patients simulated, seed reproducibility, whether include patient id variable.","code":""},{"path":"https://janickweberpals.github.io/encore.analytics/reference/simulate_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulates an artifical EHR-derived analysis-ready oncology dataset — simulate_data","text":"","code":"if (FALSE) { # \\dontrun{ library(encore.analytics)  data_miss <- simulate_data(   n_total = 3500,   seed = 41,   include_id = FALSE,   imposeNA = TRUE,   propNA = .33   )  head(data_miss)  } # }"}]
