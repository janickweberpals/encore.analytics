% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/re_weight.R
\name{re_weight}
\alias{re_weight}
\title{Custom function to perform matching/weighting and re-weighting to match a target patient population}
\usage{
re_weight(x, targets = NULL, matching_weighting = NULL, ...)
}
\arguments{
\item{x}{data.frame or mild object/list of data.frames if used in combination with lapply}

\item{targets}{named list of all target values for the raking procedure (see \code{\link[anesrake]{anesrake}})}

\item{matching_weighting}{character, one of "matching" or "weighting"}

\item{...}{other arguments and specifications to propagate on to
\code{\link[MatchIt]{matchit}} or \code{\link[WeightIt]{weightit}},
depending on chosen method (\code{matching_weighting}).}
}
\value{
an object of type \code{matchit} or \code{weightit} with
included sampling weights (\code{s.weights}) if re-weighting was performed.
}
\description{
Performs re-weighting based on the \code{\link[anesrake]{anesrake}} function.
}
\details{
This function is a wrapper for \code{\link[MatchIt]{matchit}}
and \code{\link[WeightIt]{weightit}}in combination with
\code{\link[anesrake]{anesrake}}.

The function performs any matching algorithm supplied
in \code{\link[MatchIt]{matchit}} or any weighting
algorithm in \code{\link[WeightIt]{weightit}}. The specific arguments
can be propagated to the respective functions using the
\code{...} argument.

If nothing is specified for \code{targets}, the function will simply return
the \code{\link[MatchIt]{matchit}} or \code{\link[WeightIt]{weightit}} object.

If a list of target distributions is specified for \code{targets},
the function will perform a corresponding re-weighting of matched
patients or patients with weights greater than 0, respectively.

In case of an already weighted datasets (e.g., via propensity score-derived weights),
those weights are accounted for (\code{weightvec} argument) in the
\code{\link[anesrake]{anesrake}} call.
}
\examples{
if(require("MatchThem") & require("mice")){

library(encore.io)
library(dplyr)
library(mice)
library(MatchThem)

data_miss <- simulate_flaura(
  n_total = 3500,
  seed = 41,
  include_id = FALSE,
  imposeNA = TRUE,
  propNA = .33
  ) |>
 # anesrake works best with factor variables
 # convert c_smoking_history into a factor
 mutate(c_smoking_history = factor(ifelse(c_smoking_history == TRUE, "Current/former", "Never")))

 # impute data
 data_imp <- mice(
   parallelseed = 42,
   n.core = 7,
   data = data_miss,
   m = 5,
   print = FALSE
   )

 # define covariates for propensity score model
 covariates <- data_miss |>
   select(starts_with("c_"), starts_with("dem_")) |>
   colnames()

 # define propensity score model
 ps_form <- as.formula(paste("treat ~", paste(covariates, collapse = " + ")))

 # create a mild object containing lists of data.frames
 data_mild <- mice::complete(data = data_imp, action = "all", include = FALSE)

 smoker_target <- c(.35, .65)
 names(smoker_target) <- c("Current/former", "Never")

 # summarize target distributions in a named list vector --------------
 targets <- list(smoker_target)
 names(targets) <- c("c_smoking_history")

 # create a mild object containing lists of data.frames
 data_mild <- mice::complete(data = data_imp, action = "all", include = FALSE)

 # call re-weight
 matchit_out_list <- lapply(
  X = data_mild,
  FUN = re_weight,
  targets = targets,
  matching_weighting = "matching",
  # arguments passed on to matchit
  formula = ps_form,
  ratio = 1,
  method = "nearest",
  distance = "glm",
  link = "logit",
  caliper = 0.01,
  replace = FALSE
  )

 # convert the output back into a mimids object
 data_mimids_from_function <- MatchThem::as.mimids(
   x = matchit_out_list,
   datasets = data_imp
   )

 # print
 data_mimids_from_function
}
}
\seealso{
\code{\link[MatchIt]{matchit}}
\code{\link[WeightIt]{weightit}}
\code{\link[anesrake]{anesrake}}
}
